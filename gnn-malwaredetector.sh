#!/bin/bash

GREEN="\033[1;32m"
WHITE="\033[1;37m"

echo ""
echo ""
echo ""
echo -e "${GREEN}░██████╗░███╗░░██╗███╗░░██╗      ███╗░░░███╗░█████╗░██╗░░░░░░██╗░░░░░░░██╗░█████╗░██████╗░███████╗  ██████╗░███████╗████████╗███████╗░█████╗░████████╗░█████╗░██████╗░"
echo -e "${GREEN}██╔════╝░████╗░██║████╗░██║      ████╗░████║██╔══██╗██║░░░░░░██║░░██╗░░██║██╔══██╗██╔══██╗██╔════╝  ██╔══██╗██╔════╝╚══██╔══╝██╔════╝██╔══██╗╚══██╔══╝██╔══██╗██╔══██╗"
echo -e "${GREEN}██║░░██╗░██╔██╗██║██╔██╗██║█████╗██╔████╔██║███████║██║░░░░░░╚██╗████╗██╔╝███████║██████╔╝█████╗░░  ██║░░██║█████╗░░░░░██║░░░█████╗░░██║░░╚═╝░░░██║░░░██║░░██║██████╔╝"
echo -e "${GREEN}██║░░╚██╗██║╚████║██║╚████║╚════╝██║╚██╔╝██║██╔══██║██║░░░░░░░████╔═████║░██╔══██║██╔══██╗██╔══╝░░  ██║░░██║██╔══╝░░░░░██║░░░██╔══╝░░██║░░██╗░░░██║░░░██║░░██║██╔══██╗"
echo -e "${GREEN}╚██████╔╝██║░╚███║██║░╚███║      ██║░╚═╝░██║██║░░██║███████╗░░╚██╔╝░╚██╔╝░██║░░██║██║░░██║███████╗  ██████╔╝███████╗░░░██║░░░███████╗╚█████╔╝░░░██║░░░╚█████╔╝██║░░██║"
echo -e "${GREEN}░╚═════╝░╚═╝░░╚══╝╚═╝░░╚══╝      ╚═╝░░░░░╚═╝╚═╝░░╚═╝╚══════╝░░░╚═╝░░░╚═╝░░╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝  ╚═════╝░╚══════╝░░░╚═╝░░░╚══════╝░╚════╝░░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝"

echo ""
echo ""
echo ""

echo -e "${WHITE}Version 1.0 - GNN-MalwareDetector"
echo -e "${WHITE}http://gnn-malwaredetector.org"
echo -e "${WHITE}================================"
echo ""
echo ""

# Menu options
echo -e "${WHITE}Select an option:"
echo -e "${WHITE}[1] Full Scanned Analysis + GNN"
echo -e "${WHITE}[2] Scanning Only"
echo -e "${WHITE}[3] GNN Local Data"
echo -e "${WHITE}[4] Exit"

quick_analysis() {
    echo -e "\033[1;32mINFO\033[0m Performing quick analysis..."

    # Check if the virtual environment exists
    if [ ! -d "myenv" ]; then
        echo "Creating virtual environment 'myenv'..."
        python3 -m venv myenv
        echo "Virtual environment 'myenv' created."
        # Activate the virtual environment
        source myenv/bin/activate
        # Check if the requirements.txt file exists and then install dependencies
    if [ -f "requirements.txt" ]; then
        echo "Installing dependencies from requirements.txt..."
        pip install -r requirements.txt
    else
        echo "The file requirements.txt was not found. Please make sure it exists in the current directory."
        return 1
    fi
    fi

    # Activate the virtual environment
    source myenv/bin/activate

    echo -e "\033[1;32mINFO\033[0m Please enter the name of the network interface: "
    read interface

    # Start the Python scripts in the background and get their PIDs
    sudo python3 gnn_scanner.py &
    PID_GNN_SCANNER=$!
    sudo python3 paquet_capture.py "$interface" &
    PID_PACKET_CAPTURE=$!

    cleanup() {
        kill $PID_GNN_SCANNER > /dev/null 2>&1
        kill $PID_PACKET_CAPTURE > /dev/null 2>&1
    }


    # Trap SIGINT (Ctrl+C)
    trap cleanup SIGINT

    # Wait for Python scripts to exit
    wait $PID_GNN_SCANNER > /dev/null 2>&1
    wait $PID_PACKET_CAPTURE > /dev/null 2>&1
}


# Sample function for menu option
full_analysis() {
    echo -e "\033[1;32mINFO\033[0m Performing quick analysis..."

    # Check if the virtual environment exists
    if [ ! -d "myenv" ]; then
        echo "Creating virtual environment 'myenv'..."
        python3 -m venv myenv
        echo "Virtual environment 'myenv' created."
        # Check if the requirements.txt file exists and then install dependencies
    if [ -f "requirements.txt" ]; then
        echo "Installing dependencies from requirements.txt..."
        pip install -r requirements.txt
    else
        echo "The file requirements.txt was not found. Please make sure it exists in the current directory."
        return 1
    fi
    fi

    # Activate the virtual environment
    source myenv/bin/activate

    echo -e "\033[1;32mINFO\033[0m Please enter the name of the network interface: "
    read interface

    # Execute the command with the provided interface
    sudo python3 paquet_capture.py "$interface" 

}

# Read user selection
read_selection() {
    local selection
    echo ""
    read -p "Select an option [1-4]: " selection
    case $selection in
        1) quick_analysis ;;
        2) full_analysis ;;
        3) update_definitions ;;
        4) echo "Exiting..."; exit ;;
        *) echo "[ERROR] Invalid option. Please try again." ;;
    esac
}

# Main loop to run the menu
while true; do
    echo "[*] Please select an option:"
    read_selection
done
